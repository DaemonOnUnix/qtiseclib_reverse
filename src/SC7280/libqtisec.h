#pragma once

#include "defs.h"

__int64 __fastcall cortex_a78_aarch64_sysini(__int64 result);
void e_1515634_wa();
void e_1875698_wa();
__int64 e_1503072_wa();
__int64 e_1467580_wa();
void e_1688305_wa();
void e_1492189_wa();
void e_1827429_wa();
void e_1821534_wa();
__int64 cortex_a78_amu_enable();
__int64 cortex_a78_amu_disable();
void e_1941498_wa();
__int64 e_1951500_wa();
unsigned __int64 __fastcall qtiseclib_cpuss_reset_asm(int a1);
__int64 qtiseclib_kryo6_gold_reset_asm();
__int64 qtiseclib_kryo6_silver_reset_asm();
unsigned __int64 cpuss_read_isr();
void cpuss_dsb();
void cpuss_dmb();
void cpuss_isb();
unsigned __int64 __fastcall hoya_10_cluster_aarch64_sysini(unsigned __int64 result);
__int64 __fastcall hoya_10_cpuss_aarch64_por_sysini(__int64 result);
__int64 __fastcall hoya_10_interconnect_aarch64_sysini(__int64 result);
unsigned __int64 __fastcall hoya_11_cluster_aarch64_sysini(unsigned __int64 result);
__int64 __fastcall hoya_11_cpuss_aarch64_por_sysini(__int64 result);
unsigned __int64 __fastcall hoya_20_cluster_aarch64_sysini(unsigned __int64 result);
__int64 __fastcall hoya_20_cpuss_aarch64_por_sysini(__int64 result);
unsigned __int64 __fastcall kryo400_gold_aarch64_config_wa_sysini(unsigned __int64 result, int a2);
__int64 __fastcall kryo400_gold_aarch64_sysini(__int64 result);
__int64 __fastcall kryo400_silver_aarch64_sysini(__int64 result);
__int64 __fastcall kryo500_silver_aarch64_sysini(__int64 result);
unsigned __int64 __fastcall cluster_aarch64_sysini(unsigned __int64 result);
__int64 __fastcall cpuss_aarch64_por_sysini(__int64 result);
__int64 __fastcall interconnect_aarch64_sysini(__int64 result);
__int64 __fastcall cpu_aarch64_sysini(__int64 result);
int *__fastcall msm_xpu_isr(__int64 a1, __int64 a2, int *a3);
__int64 xpu_register_interrupts();
__int64 xpu_static_config();
__int64 ac_init();
__int64 __fastcall mem_assign(__int64 *a1, unsigned int a2, __int64 a3, unsigned int a4, int *a5, unsigned int a6);
__int64 __fastcall qtiseclib_mem_assign(__int64 *a1, unsigned int a2, __int64 a3, unsigned int a4, int *a5, unsigned int a6);
__int64 __fastcall vmidmt_getInfo_index(unsigned __int8 a1);
_DWORD *__fastcall vmidmt_error_handler(__int64 a1, __int64 a2, _DWORD *a3);
__int64 __fastcall vmidmt_map_vmid_internal(unsigned __int8 a1);
__int64 __fastcall vmidmt_map_multisid_vmid_internal(unsigned __int8 a1);
__int64 vmidmt_config_vmids();
__int64 __fastcall vmidmt_config_options_per_master(int a1);
__int64 vmidmt_config_options();
__int64 vmidmt_register_interrupts();
__int64 vmidmt_config();
__int64 ACTzTargetConfig();
__int64 __fastcall cpucp_clkdom_init(__int64 a1);
__int64 __fastcall Clock_InitImage(__int64 a1);
__int64 Clock_PostInitImage();
__int64 __fastcall Clock_DisableSource(__int64 a1);
__int64 Clock_IsBSPSupported();
__int64 Clock_InitRPMh();
__int64 __fastcall Clock_SetCXVoltage(int a1);
__int64 __fastcall Clock_VoltageRequest(unsigned int a1, unsigned int a2);
__int64 __fastcall Clock_EnableSource(__int64 a1);
__int64 __fastcall Clock_EnableClockDomain(__int64 a1);
__int64 __fastcall Clock_DisableClockDomain(__int64 a1);
__int64 __fastcall Clock_WriteRegRegion(__int64 result);
__int64 Clock_Init();
__int64 Clock_TZInitDone();
__int64 __fastcall Clock_GetClockId(__int64 a1, _QWORD *a2);
__int64 __fastcall Clock_EnableClock(__int64 a1);
__int64 __fastcall Clock_DisableClock(__int64 a1);
__int64 __fastcall Clock_IsClockOn(__int64 a1, _BYTE *a2);
__int64 __fastcall Clock_IsClockPowerDomainOn(__int64 a1, _BYTE *a2);
__int64 __fastcall Clock_SetClockFrequency(__int64 a1, int a2, unsigned int *a3);
__int64 __fastcall Clock_EnableClockGroup(unsigned int a1);
__int64 __fastcall Clock_DisableClockGroup(unsigned int a1);
__int64 Clock_SetRPMAvailable();
__int64 Clock_RPMRequest();
__int64 __fastcall Clock_GetRPMId(__int64 a1, _QWORD *a2);
__int64 __fastcall Clock_EnableDFS(__int64 a1);
__int64 __fastcall Clock_GetFrequencyPlan(__int64 a1, unsigned __int64 *a2, unsigned int *a3);
__int64 __fastcall cmd_db_conv_str_to_unit64(__int64 a1);
__int64 __fastcall cmd_db_query(__int64 a1, __int64 a2, __int64 a3);
__int64 __fastcall cmd_db_query_addr(__int64 a1);
__int64 __fastcall cmd_db_query_priority(int a1, char a2);
__int64 __fastcall cmd_db_query_priority_res_id(__int64 a1, char a2);
__int64 __fastcall cmd_db_query_version(__int64 a1);
__int64 __fastcall cmd_db_query_len(__int64 a1);
__int64 __fastcall cmd_db_query_aux_data(__int64 a1, _BYTE *a2, __int64 a3);
__int64 __fastcall cmd_db_query_slv_id(__int64 a1);
bool cmd_db_init();
__int64 cmd_db_prep_access(void); // weak
__int64 cmd_db_access_done(void); // weak
__int64 __fastcall cmd_db_target_mem_init(_DWORD *a1);
__int64 cmd_db_tzbsp_init(void); // weak
__int64 __fastcall calculate_cpumasks(__int64 result);
void __fastcall __noreturn sgi15_isr_handler(); // weak
__int64 __fastcall dbg_halt_online_cpus(__int64 result);
void __fastcall __noreturn dbg_err_fatal_handler(unsigned int a1);
void __noreturn nsec_wdt_bite_isr_handler();
__int64 dbg_is_sdi_enable();
__int64 dbg_init();
void __noreturn qtiseclib_panic();
void __fastcall __noreturn dbg_err_fatal(unsigned int a1);
__int64 qtiseclib_is_debug_enabled_secure_io_access();
unsigned __int64 __fastcall HAL_clk_GenericConfigMuxOffs_part_0(unsigned __int64 result, unsigned int *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6);
__int64 __fastcall HAL_clk_EnableClock(__int64 result);
__int64 __fastcall HAL_clk_DisableClock(__int64 result);
__int64 *__fastcall HAL_clk_EnableSource(__int64 *result);
__int64 __fastcall HAL_clk_DisableSource(__int64 a1);
__int64 __fastcall HAL_clk_IsClockOn(int **a1);
__int64 __fastcall HAL_clk_WaitForClockOn(int **a1);
_DWORD *__fastcall HAL_clk_ConfigClockMux(_DWORD *result, unsigned int *a2);
__int64 __fastcall HAL_clk_EnablePowerDomain(__int64 result);
_DWORD *__fastcall HAL_clk_DisablePowerDomain(_DWORD **a1);
__int64 __fastcall HAL_clk_IsPowerDomainOn(_DWORD **a1);
__int64 __fastcall HAL_clk_WaitForPowerDomainOn(_DWORD **a1);
__int64 __fastcall HAL_clk_EnableDFS(__int64 result);
unsigned __int64 __fastcall HAL_clk_ConfigDFSMux(unsigned __int64 result, __int64 a2);
__int64 __fastcall vmidmt_SetDefaultConfig_isra_0_part_1(unsigned int **a1, __int64 *a2, char a3);
__int64 __fastcall vmidmt_ShiftCtxt_isra_2(__int64 a1, int a2, int a3);
__int64 __fastcall vmidmt_ConfigCtxt_isra_4(__int64 a1, int a2, __int64 *a3);
__int64 __fastcall vmidmt_Init(__int64 *a1, __int64 a2, __int64 *a3);
__int64 __fastcall vmidmt_EnableClientP(int **a1, char a2);
__int64 __fastcall vmidmt_ConfigSSDT(__int64 a1, __int64 a2, unsigned int a3);
__int64 __fastcall vmidmt_ConfigVmidCtxt(__int64 a1, unsigned int a2, __int64 *a3);
__int64 __fastcall vmidmt_ConfigVmidCtxtWithSIDList(__int64 a1, unsigned int a2, __int64 a3, unsigned int a4, __int64 *a5);
__int64 __fastcall vmidmt_ConfigErrRep(__int64 a1, char a2, int a3);
bool __fastcall vmidmt_IsError(__int64 *a1, char a2);
__int64 __fastcall vmidmt_GetError(__int64 result, unsigned __int8 a2, _DWORD *a3);
__int64 __fastcall vmidmt_ClearError(__int64 *a1, char a2);
unsigned __int64 __fastcall qtisec_malloc(unsigned __int64 a1);
unsigned __int64 __fastcall qtisec_realloc(__int64 a1, unsigned __int64 a2);
__int64 __fastcall qtisec_free(__int64 a1);
__int64 cpucp_host_handle_irq();
__int64 __fastcall cpucp_host_clock_domain_enable(__int64 a1);
__int64 cpucp_host_error_handler();
__int64 cpucp_host_init();
__int64 cpucp_host_clock_domain_init();
__int64 cpucp_host_clock_domain_disable();
__int64 cpucp_host_send_message();
__int64 cpucp_host_recv_message();
__int64 __fastcall cpucp_iface_initialize(_QWORD *a1);
__int64 icbcfg_init();
__int64 __fastcall get_addr_translation(__int64 a1);
__int64 __fastcall get_device_configuration_isra_0(_QWORD *a1);
__int64 __fastcall get_system_memory_map(__int64 a1, _QWORD *a2);
__int64 __fastcall translate_address(__int64 a1, __int64 a2, _QWORD *a3);
bool __fastcall check_overlap(unsigned __int64 *a1, unsigned __int64 *a2);
__int64 __fastcall compare_ch_segments(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8);
__int64 __fastcall check_dupRegion(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8);
__int64 update_addr_translation();
__int64 __fastcall ICB_Get_Memmap(__int64 a1, _QWORD *a2);
__int64 __fastcall ICB_Get_AllowedMemRegion(__int64 a1, _QWORD *a2);
__int64 __fastcall ICB_Get_MCAddr(__int64 a1, __int64 a2, _QWORD *a3);
unsigned int *__fastcall aggregate_sw_node(unsigned int *result, _QWORD *a2);
__int64 __fastcall add_sw_node_request(int *a1, __int64 a2);
__int64 __fastcall remove_sw_node_request(int *a1, __int64 a2);
__int64 __fastcall remove_client_requests(__int64 a1);
__int64 icbuarb_init();
__int64 __fastcall icbuarb_create_client(int a1, int a2);
__int64 __fastcall icbuarb_issue_request(_QWORD *a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9);
__int64 __fastcall icbuarb_destroy_client(_QWORD *a1);
__int64 __fastcall icbuarb_target_init(__int64 a1);
__int64 icbuarb_target_d4_entry();
__int64 icbuarb_target_d4_exit();
_DWORD *__fastcall inq_create(int a1);
__int64 __fastcall inq_size(__int64 a1);
unsigned int *__fastcall inq_append(unsigned int *result, __int64 a2);
__int64 __fastcall inq_pop(unsigned int *a1);
__int64 __fastcall inq_head(__int64 a1);
__int64 __fastcall inq_it_begin(__int64 a1, _QWORD *a2);
unsigned int **__fastcall inq_it_next(unsigned int **result);
__int64 __fastcall inq_it_deref(__int64 a1);
unsigned int *__fastcall inq_it_insert(unsigned int **a1, __int64 a2);
__int64 __fastcall inq_it_delete(unsigned int **a1);
__int64 __fastcall int_svc_register_isr(int a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5);
__int64 __fastcall int_svc_unregister_isr(int a1);
__int64 __fastcall qtiseclib_invoke_isr(__int64 a1, __int64 a2);
bool __fastcall int_svc_is_cpu_on(char a1);
__int64 __fastcall int_svc_core_pos_to_mpidr(unsigned int a1);
__int64 __fastcall int_svc_notify_cpu_state(__int64 a1);
__int64 int_svc_init();
__int64 lmh_target_config_init();
__int64 __fastcall lmh_c4_entry(_QWORD); // weak
__int64 __fastcall lmh_c4_exit(_QWORD); // weak
__int64 CPR11_SVSL1_QUOT_VMIN();
__int64 cpucp_prepare();
__int64 cpucp_unprepare();
__int64 cpucp_host_configure_shared_data();
__int64 cpucp_start();
__int64 cpucp_load_firmware();
__int64 __fastcall pdcMap_getInterruptTable(__int64 a1);
__int64 __fastcall pdcMap_getGpioTable(__int64 a1);
__int64 __fastcall mapOS_getInterruptTable(__int64 a1);
__int64 __fastcall mapOS_getGpioTable(__int64 a1);
__int64 __fastcall mem_get_next_block(__int64 a1, __int64 a2);
__int64 __fastcall mem_heap_leave_crit_sect(__int64 a1);
__int64 __fastcall mem_heap_enter_crit_sect(__int64 a1);
__int64 __fastcall mem_init_block_header_isra_0(__int64 a1, int a2);
__int64 __fastcall mem_init_heap(int *a1, __int64 *a2, __int64 a3, unsigned __int64 a4);
unsigned __int64 __fastcall mem_malloc(__int64 a1, _QWORD *a2, unsigned int a3);
__int64 __fastcall mem_free(__int64 a1, _QWORD *a2, __int64 a3);
__int64 __fastcall mem_get_buffer_size(__int64 a1);
unsigned __int64 __fastcall mem_realloc(__int64 a1, _QWORD *a2, __int64 a3, unsigned int a4);
__int64 __fastcall NOC_Error_Handle_Interrupt(__int64 a1, __int64 a2, __int64 a3);
__int64 NOC_Error_Init();
void *NOC_Error_Platform_Get_Propdata();
void *NOC_Error_Platform_Get_Propdata_OEM();
__int64 init_system_configuration();
void *pcu_sequencer_target_init();
__int64 get_max_cmd_size();
__int64 __fastcall pcu_config_seq_ctl(__int64 result, int a2, int a3, int a4);
_DWORD *__fastcall pcu_write_cmds(unsigned __int8 a1, int a2);
__int64 __fastcall pcu_node_init(__int64 a1);
__int64 __fastcall pcu_get_node(int a1, _QWORD *a2);
__int64 __fastcall pcu_config_low_power_mode(__int64 *a1, int a2);
__int64 __fastcall pcu_write_seq_memory(__int64 a1, int a2);
__int64 pcu_seq_memory_init();
__int64 pcu_init();
__int64 __fastcall int_findEntry(int a1);
unsigned __int16 *__fastcall gpio_findEntry(int a1, _DWORD *a2);
__int64 __fastcall pdcInt_config(int a1, __int64 a2);
__int64 __fastcall pdcInt_enable(int a1);
__int64 __fastcall pdcInt_disable(int a1);
__int64 __fastcall pdcGpio_unconfig(int a1);
__int64 __fastcall pdcGpio_config(int a1, _DWORD *a2, _DWORD *a3);
__int64 __fastcall pdcGpio_enable(int a1);
__int64 __fastcall pdcGpio_disable(int a1);
__int64 pdc_initialize();
unsigned __int64 __fastcall pdc_getTriggerConfig(int a1, unsigned int a2);
__int64 __fastcall HALInternal_setInterruptState(unsigned int a1, int a2, unsigned __int8 a3);
__int64 __fastcall pdcHAL_enable(unsigned int a1, int a2);
__int64 __fastcall pdcHAL_disable(unsigned int a1, int a2);
__int64 __fastcall pdcHAL_setTriggerConfig(int a1, int a2, _DWORD *a3);
__int64 __fastcall pdcHAL_setGPIOConfig(int a1, __int64 a2, _DWORD *a3);
int *__fastcall pdcHAL_setOwner(int a1, int a2, char a3);
int *pdcOS_initialize();
__int64 __fastcall pdc_seq_handle_env_init(_QWORD *a1);
__int64 __fastcall pdc_seq_hal_enable(__int64 a1, char a2);
__int64 __fastcall pdc_seq_hal_clk_gate_enable(__int64 a1, char a2);
__int64 __fastcall pdc_seq_hal_cfg_wakeup_time(__int64 result, __int64 a2);
__int64 __fastcall pdc_seq_hal_cfg_wakeup_time_ex(__int64 a1, __int64 a2);
__int64 __fastcall pdc_seq_hal_cfg_start_addr(__int64 result, unsigned __int16 a2);
__int64 __fastcall pdc_seq_hal_cfg_start_addr_ex(__int64 a1, unsigned __int8 a2);
__int64 __fastcall pdc_seq_hal_enable_arc_timer(__int64 a1, char a2);
__int64 __fastcall pdc_seq_hal_cfg_pwr_ctl_override(__int64 a1, int a2, int a3);
__int64 __fastcall pdc_seq_hal_cfg_wait_event_override(__int64 a1, int a2, int a3);
__int64 __fastcall pdc_seq_hal_cfg_br_event_override(__int64 a1, int a2, int a3);
__int64 __fastcall pdc_seq_hal_cfg_br_addr(__int64 a1, unsigned __int16 a2, unsigned __int8 a3);
__int64 __fastcall pdc_seq_hal_cfg_delay(__int64 a1, unsigned __int16 a2, int a3);
__int64 __fastcall pdc_seq_hal_profile_ts_count(__int64 a1);
__int64 __fastcall pdc_seq_hal_enable_profile_ts(__int64 a1, unsigned __int8 a2, char a3);
unsigned __int64 __fastcall pdc_seq_hal_profile_ts(__int64 a1, unsigned __int8 a2);
__int64 __fastcall pdc_seq_hal_copy_cmd_seq(__int64 a1, unsigned __int16 a2, __int64 a3, unsigned int a4);
__int64 __fastcall pdc_seq_count(unsigned __int8 a1);
__int64 __fastcall pdc_seq_handles(unsigned __int8 a1, unsigned int a2, __int64 a3);
__int64 __fastcall pdc_seq_handle_internal_cfg(__int64 a1);
__int64 __fastcall pdc_seq_copy_cmd_seq(__int64 a1);
__int64 __fastcall pdc_seq_mode_index(__int64 a1, unsigned __int16 a2);
__int64 __fastcall pdc_seq_handle_init(_QWORD *a1);
__int64 __fastcall pdc_seq_enable(__int64 a1, char a2);
__int64 __fastcall pdc_seq_set_wakeup_time(__int64 a1, __int64 a2);
__int64 __fastcall pdc_seq_set_lpm(_QWORD *a1, unsigned __int16 a2);
__int64 __fastcall pdc_seq_profile_ts_count(__int64 a1);
__int64 __fastcall pdc_seq_enable_profile_ts(__int64 a1, unsigned __int8 a2);
__int64 __fastcall pdc_seq_profile_ts(__int64 a1);
__int64 __fastcall pdc_seq_enable_arc_timer(__int64 a1, char a2);
__int64 pdc_seq_sys_init();
__int64 pdc_seq_test();
void *pdc_seq_driver_init();
__int64 __fastcall pdc_seq_handle_target_init(__int64 a1);
__int64 pdcTarget_preInit();
int *pdcTarget_postInit();
__int64 pdcTcs_initialize();
char *__fastcall pdcTcs_getResources(unsigned int a1);
char **pdcTcs_getAllResourceList();
__int64 __fastcall pm_app_ps_hold_cfg(unsigned int a1);
__int64 pm_comm_channel_init_internal();
__int64 __fastcall pm_comm_read_byte(char a1, unsigned __int16 a2, char *a3, unsigned __int8 a4);
__int64 __fastcall pm_comm_read_byte_mask(char a1, unsigned __int16 a2, char a3, char *a4, unsigned __int8 a5);
__int64 __fastcall pm_comm_write_byte(char a1, unsigned __int16 a2, char a3, unsigned __int8 a4);
__int64 __fastcall pm_comm_write_byte_mask(char a1, unsigned __int16 a2, char a3, char a4, unsigned __int8 a5);
__int64 __fastcall pm_comm_write_byte_array(char a1, unsigned __int16 a2, unsigned int a3, char *a4, unsigned __int8 a5);
__int64 __fastcall pm_comm_read_byte_array(char a1, unsigned __int16 a2, unsigned int a3, char *a4, unsigned __int8 a5);
__int64 pm_pon_init();
__int64 __fastcall pm_pon_ps_hold_cfg(unsigned __int8 a1, unsigned int a2);
__int64 __fastcall pm_pon_get_reset_config_val(int a1, char *a2);
__int64 __fastcall pm_pon_gp_reset_cfg(unsigned __int8 a1, int a2, unsigned int a3);
__int64 __fastcall pm_tgt_get_pshold_reset_cfg(unsigned int a1, unsigned int a2, _DWORD *a3);
__int64 __fastcall pm_tgt_get_pshold_gp1_reset_cfg(unsigned int a1, unsigned int a2, _DWORD *a3);
__int64 __fastcall pm_pon_tgt_specific_pshold_cfg(unsigned int a1, unsigned int a2);
__int64 pm_version_detect();
__int64 __fastcall pm_get_pmic_model(unsigned __int8 a1);
__int64 __fastcall pm_get_slave_id(unsigned __int8 a1, unsigned __int8 a2, unsigned int *a3);
__int64 __fastcall qtiseclib_psci_init(unsigned __int64 a1);
__int64 __fastcall qtiseclib_psci_node_power_on(__int64 a1);
char **__fastcall qtiseclib_psci_node_on_finish(__int64 a1);
char **__fastcall qtisec_psci_node_down(__int64 a1, unsigned int a2);
char **__fastcall qtiseclib_psci_node_power_off(__int64 a1);
char **__fastcall qtiseclib_psci_node_suspend(__int64 a1);
char **__fastcall qtiseclib_psci_node_suspend_finish(__int64 a1);
void __noreturn qtiseclib_psci_system_off();
void __noreturn qtiseclib_psci_system_reset();
__int64 __fastcall cpu_power_on_finish(__int64 a1, __int64 a2);
__int64 __fastcall cpu_power_on(__int64 a1, __int64 a2);
__int64 __fastcall cpu_init(__int64 a1);
__int64 __fastcall l3_lpm_entry(__int64 a1, unsigned __int8 *a2);
__int64 __fastcall l3_init(__int64 a1);
__int64 __fastcall cpu_lpm_exit(__int64 a1, unsigned __int8 *a2, int a3);
__int64 __fastcall cpu_lpm_entry(__int64 a1, _BYTE *a2, int a3);
__int64 __fastcall l3_lpm_exit(__int64 a1, __int64 a2);
__int64 pwr_utils_lvl_init();
__int64 __fastcall pwr_utils_lvl_resource_idx(__int64 a1);
__int64 __fastcall pwr_utils_hlvl(int a1, int a2, char *a3);
__int64 __fastcall pwr_utils_hlvl_named_resource(__int64 a1, int a2, char *a3);
__int64 __fastcall pwr_utils_resource_lvls_count(int a1);
__int64 __fastcall pwr_utils_named_resource_lvls_count(__int64 a1);
__int64 __fastcall pwr_utils_vlvl(int a1, int a2);
__int64 __fastcall pwr_utils_vlvl_named_resource(__int64 a1, int a2);
void __fastcall __noreturn qtisec_assert(const char *a1, unsigned int a2, const char *a3);
void (*qtiseclib_bl31_platform_setup())(void);
_DWORD *__fastcall get_cmd_in_progress_isra_1_constprop_3(__int64 a1, _QWORD *a2, int a3);
_QWORD *rpmh_clientq_create();
__int64 __fastcall rpmh_client_handle_add(unsigned int **a1);
__int64 __fastcall rpmh_client_command_add(__int64 a1);
__int64 __fastcall check_for_events(__int64 a1, int a2);
__int64 __fastcall rpmh_client_command_remove(__int64 a1, int a2);
__int64 __fastcall rpmh_client_command_finish(__int64 a1, int a2);
__int64 __fastcall rpmh_client_wait_on_cmd(__int64 a1, unsigned int a2, unsigned int a3, unsigned __int8 a4);
__int64 rpmh_epcb_timeout();
int *__fastcall set_g_cmd_set_single(int a1, int a2, char a3, int a4);
__int64 __fastcall add_cmd_set_for_sleep_isra_0_constprop_3(int a1, int a2);
__int64 __fastcall add_rc_for_sleep(int *a1, int a2);
__int64 __fastcall rpmh_wait_for_cmd_constprop_5(__int64 a1, unsigned int a2, unsigned int a3, unsigned __int8 a4);
__int64 __fastcall rpmh_create_handle_internal(int a1, __int64 a2, unsigned __int8 a3);
__int64 __fastcall rpmh_create_handle_explicit(int a1, __int64 a2);
__int64 __fastcall rpmh_create_handle(int a1, __int64 a2);
__int64 __fastcall rpmh_invalidate_explicit_cmds(__int64 a1);
unsigned int *__fastcall rpmh_find_resource_command(unsigned int a1);
unsigned int *__fastcall get_rc(unsigned int a1);
__int64 __fastcall add_explicit_cmd_set_for_sleep(int a1, int a2);
__int64 __fastcall rpmh_churn_all(__int64 a1, unsigned int a2);
__int64 __fastcall rpmh_churn_single(__int64 a1, unsigned int a2);
__int64 __fastcall rpmh_barrier_all(_QWORD, _QWORD); // weak
__int64 __fastcall rpmh_barrier_single(_QWORD, _QWORD); // weak
__int64 __fastcall rpmh_finish_amc_internal(int a1, unsigned __int8 a2);
__int64 __fastcall rpmh_finish_amc(int a1);
__int64 __fastcall rpmh_issue_command_set_internal(__int64 a1, unsigned int *a2, unsigned __int8 a3);
__int64 __fastcall rpmh_issue_command_set(__int64 a1, unsigned int *a2);
__int64 __fastcall rpmh_issue_command(__int64 a1, int a2, char a3, int a4, int a5);
__int64 __fastcall rpmh_enter_sleep(int a1);
__int64 __fastcall rpmh_exit_sleep(int a1);
__int64 __fastcall rpmh_get_wake_latency(int a1);
void rpmh_client_init();
__int64 __fastcall rpmh_clean_cmd(_QWORD *a1, unsigned int a2);
__int64 __fastcall rpmh_cmdq_create(unsigned int a1);
__int64 __fastcall rpmh_cmdq_send_cmd_set(unsigned int *a1, int *a2, _DWORD *a3);
unsigned int *__fastcall cmdq_finish_cmd(__int64 a1, __int64 a2, int a3, __int64 a4, int a5);
bool __fastcall cmdq_empty(__int64 a1);
__int64 __fastcall cmdq_num_in_flight(__int64 a1);
__int64 __fastcall rpmh_cmdq_send_cmd_at_head(__int64 a1);
__int64 rpmh_create_dal_event();
unsigned int *__fastcall rpmh_destroy_dal_event(__int64 a1);
__int64 rpmh_os_init(void); // weak
__int64 __fastcall rpmh_clock_toggle(_QWORD, _QWORD); // weak
__int64 rpmh_lock();
__int64 rpmh_unlock();
__int64 is_rpmh_busy();
__int64 __fastcall rpmh_core_verify(__int64 result);
__int64 __fastcall rpmh_core_verify_ptr(__int64 result);
void __fastcall __noreturn rpmh_err_fatal(_QWORD); // weak
void *__fastcall rpmh_register_isr(__int64 a1, __int64 a2, __int64 a3, int a4);
__int64 rpmh_deregister_isr(void); // weak
__int64 rpmh_get_timestamp(void); // weak
__int64 __fastcall rpmh_clz(int a1);
unsigned __int64 __fastcall rpmh_malloc(unsigned int a1);
unsigned __int64 __fastcall rpmh_realloc(__int64 a1, unsigned int a2);
__int64 __fastcall resource_command_dirty_update_isra_0(__int64 result);
__int64 __fastcall rpmh_resource_command_init(_DWORD *a1, int a2);
unsigned __int64 __fastcall rpmh_resource_command_get_voter(__int64 a1, int a2);
__int64 __fastcall rpmh_resource_command_get_priority(__int64 a1, int a2);
unsigned __int64 __fastcall resource_command_sets_dirty(__int64 a1, int a2);
bool __fastcall rpmh_resource_command_update(__int64 a1, unsigned int a2, int a3, int a4, unsigned __int8 a5);
__int64 __fastcall rpmh_resource_command_exit_sleep(__int64 a1, int a2);
__int64 __fastcall rpmh_resource_command_val_at_rpmh(unsigned int a1, int a2, unsigned int a3, unsigned __int8 a4);
__int64 __fastcall rpmh_resource_command_finish(unsigned int a1, int a2);
__int64 __fastcall tcs_update_mode(unsigned int a1, unsigned int a2);
__int64 tcs_init();
__int64 __fastcall drv_valid(int a1);
__int64 __fastcall lookup_drv_index(int a1);
__int64 __fastcall get_finished_amc(int a1);
__int64 __fastcall tcs_clean_up(__int64 a1, unsigned __int8 *a2, int a3, int a4);
__int64 __fastcall tcs_send_internal(__int64 a1, int a2, unsigned int a3);
__int64 __fastcall is_tcs_stuck(int a1);
__int64 __fastcall tcs_size(int a1);
__int64 __fastcall tcs_slots_available(int a1, int a2, unsigned int a3);
__int64 __fastcall tcs_prepare_sleep_add_cmd_set(int *a1, int a2);
__int64 __fastcall is_amc_free(int a1);
bool __fastcall is_amc_finished(int a1);
__int64 __fastcall get_finished_drv(int a1);
__int64 __fastcall tcs_finish_amc(__int64 a1, int a2, int a3);
__int64 __fastcall tcs_finish_active_amc(_QWORD *a1, __int64 a2, int a3);
__int64 __fastcall tcs_send(__int64 a1, int a2);
__int64 __fastcall tcs_clean_sleep_wake(int a1);
__int64 __fastcall tcs_prepare_sleep_commit(int a1);
__int64 __fastcall isContextInitialized(_BYTE *a1, unsigned int a2);
char *rscHalGetContext();
__int64 __fastcall rscHalGetNumTcs(unsigned __int64 a1, char a2, _DWORD *a3);
__int64 __fastcall rscHalGetNumCmdsPerTcs(__int64 a1, unsigned __int8 a2, _DWORD *a3);
__int64 __fastcall rscHalGetDrvInfo(__int64 a1);
__int64 __fastcall rscHalGetChipsetMappingTable(__int64 a1);
__int64 __fastcall RscHalRegisterDrv(unsigned int a1);
__int64 __fastcall RscHalVersionID(unsigned int a1, int *a2);
__int64 __fastcall RscHalReadConfig(unsigned int a1, _DWORD *a2, _DWORD *a3);
__int64 __fastcall RscHalIsePCBTimedOut(unsigned int a1, _BYTE *a2);
__int64 __fastcall RscHalClearePCBTimedOut(unsigned int a1);
__int64 __fastcall RscHalToggleePCBTimeOut(unsigned int a1, char a2);
__int64 __fastcall RscHalUpdateePCBTimeOutThreshold(unsigned int a1, unsigned __int16 a2);
__int64 __fastcall RscHalIsTCSIdle(unsigned int a1, unsigned __int8 a2, _BYTE *a3);
__int64 __fastcall RscHalTriggerTCS(unsigned int a1, unsigned __int8 a2);
__int64 __fastcall RscHalConvertTCStoAMC(unsigned int a1, unsigned __int8 a2);
__int64 __fastcall RscHalConvertAMCtoTCS(unsigned int a1, unsigned __int8 a2);
__int64 __fastcall RscHalToggleTCSCmd(unsigned int a1, unsigned __int8 a2, unsigned __int16 a3);
__int64 __fastcall RscHalEnableAMCFinishedIRQ(unsigned int a1, unsigned int a2);
__int64 __fastcall RscHalDisableAMCFinishedIRQ(unsigned int a1, unsigned int a2);
__int64 __fastcall RscHalCheckAMCFinishedIRQ(unsigned int a1, int *a2);
__int64 __fastcall RscHalClearAMCFinishedIRQ(unsigned int a1, unsigned int a2);
__int64 __fastcall RscHalCheckTCSCmdTriggerStatus(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, _BYTE *a4);
__int64 __fastcall RscHalCheckTCSCmdIssueStatus(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, _BYTE *a4);
__int64 __fastcall RscHalCheckTCSCmdCompletionStatus(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, _BYTE *a4);
__int64 __fastcall RscHalReadResponseData(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, _DWORD *a4);
__int64 __fastcall RscHalConfigureCmdCompletion(unsigned int a1, unsigned __int8 a2, __int16 a3);
__int64 __fastcall rscHalSetupDrv0Tcs(__int64 a1, unsigned __int8 a2, unsigned __int8 *a3);
__int64 __fastcall rscHalSetupDrv2Tcs(__int64 a1, unsigned __int8 a2, unsigned __int8 *a3);
__int64 __fastcall RscHalSetupTCS(__int64 a1);
__int64 __fastcall RscHalCheckTCSIdle_HLOS(unsigned int a1);
__int64 __fastcall rsc_init_base_address(__int64 a1);
__int64 __fastcall rsc_hal_get_major_ver(_DWORD *a1);
__int64 __fastcall rsc_hal_get_minor_ver(_DWORD *a1);
__int64 __fastcall rsc_hal_get_step_ver(_DWORD *a1);
__int64 __fastcall rsc_hal_get_solver_cfg(__int64 a1);
unsigned __int64 __fastcall rsc_hal_get_num_drvs(__int64 a1);
__int64 __fastcall rsc_hal_get_num_seq_cmd_words(__int64 a1);
unsigned __int64 __fastcall rsc_hal_get_num_ts_events(__int64 a1);
__int64 __fastcall rsc_hal_get_delay_cntr_bitwidth(__int64 a1);
__int64 __fastcall rsc_hal_get_parentchild_cfg(__int64 a1);
__int64 __fastcall rsc_hal_get_status0(__int64 a1);
__int64 __fastcall rsc_hal_get_status1(__int64 a1);
__int64 __fastcall rsc_hal_get_status2(__int64 a1);
__int64 __fastcall rsc_hal_set_ts_unit_owner(__int64 result, unsigned __int8 a2);
__int64 __fastcall rsc_hal_enable_ts_unit(__int64 result, unsigned __int8 a2, char a3);
__int64 __fastcall rsc_hal_get_ts_unit_l(__int64 a1, unsigned __int8 a2);
__int64 __fastcall rsc_hal_get_ts_unit_h(__int64 a1, unsigned __int8 a2);
unsigned __int64 __fastcall rsc_hal_get_ts_overflow(__int64 a1, unsigned __int8 a2);
__int64 __fastcall rsc_hal_get_ts_valid(__int64 a1, unsigned __int8 a2);
__int64 __fastcall rsc_hal_get_seq_override_start_addr_valid(__int64 a1);
__int64 __fastcall rsc_hal_set_seq_override_start_addr_valid(__int64 result, int a2);
__int64 __fastcall rsc_hal_set_seq_override_start_addr(__int64 result, unsigned __int8 a2);
__int64 __fastcall rsc_hal_set_trigger_seq(__int64 result, unsigned __int8 a2);
__int64 __fastcall rsc_hal_set_trigger_start_address(__int64 result, unsigned __int16 a2);
__int64 __fastcall rsc_hal_seq_busy(__int64 a1);
__int64 __fastcall rsc_hal_get_seq_program_counter(__int64 a1);
__int64 __fastcall rsc_hal_config_br_addr(__int64 result, int a2, unsigned __int16 a3);
__int64 __fastcall rsc_hal_copy_simple_cmd_seq(__int64 a1, unsigned __int16 a2, __int64 a3, unsigned int a4);
__int64 __fastcall rsc_hal_copy_extended_cmd_seq(__int64 a1, unsigned __int16 a2, __int64 a3, unsigned int a4);
__int64 __fastcall rsc_hal_conf_hidden_tcs_owner(__int64 result, char a2);
__int64 __fastcall rsc_get_count(unsigned __int8 a1);
__int64 __fastcall rsc_get_handles(char a1, int a2, __int64 a3);
__int64 __fastcall rsc_read_id_info(__int64 a1);
__int64 __fastcall rsc_read_internal_config(__int64 result);
__int64 __fastcall rsc_mode_index(__int64 a1, unsigned __int8 a2);
__int64 __fastcall rsc_copy_cmd_seqs(__int64 a1);
__int64 __fastcall rsc_enable_ts_events(__int64 a1, char a2);
__int64 __fastcall rsc_driver_init(_QWORD); // weak
__int64 __fastcall rsc_ts_init(__int64 a1);
__int64 __fastcall rsc_set_low_power_mode(__int64 a1, unsigned __int8 a2);
__int64 __fastcall rsc_program_dyn_cmd_seq(__int64 a1, __int64 a2, __int16 a3, _DWORD *a4);
__int64 __fastcall rsc_trigger_seq(__int64 a1, unsigned __int8 a2);
__int64 __fastcall rsc_get_time_stamp(__int64 a1, unsigned __int8 a2);
__int64 __fastcall rsc_conf_hidden_tcs_ownership(__int64 a1, char a2);
__int64 __fastcall rsc_instance_init(__int64 a1);
void **rsc_target_init();
unsigned int *__fastcall HAL_avs_Enable(unsigned int a1, int a2);
__int64 __fastcall HAL_avs_Ramp_En(unsigned int a1, char a2);
__int64 __fastcall HAL_avs_SetDelay(unsigned int a1, __int16 a2);
__int64 __fastcall HAL_avs_SetClockDivider(unsigned int a1, char a2);
__int64 __fastcall HAL_avs_SetVoltageStepSize(unsigned int a1, int a2, unsigned __int8 a3);
__int64 __fastcall HAL_avs_SetVoltageWidth(unsigned int a1, char a2);
__int64 __fastcall HAL_avs_GetVddSettleTimeUS(int a1, int a2);
__int64 __fastcall HAL_avs_SetVoltage(unsigned int a1, unsigned int a2);
__int64 __fastcall HAL_avs_SetPowerMode(unsigned int a1, int a2);
__int64 __fastcall HAL_avs_SetMaxVoltage(unsigned int a1, int a2);
__int64 __fastcall HAL_avs_SetMinVoltage(unsigned int a1, unsigned __int16 a2);
__int64 __fastcall HAL_avs_EnableCtl(unsigned int a1, unsigned __int8 a2);
__int64 __fastcall HAL_avs_RestoreBootVoltage(unsigned int a1);
__int64 HAL_avs_SecondaryRailInit();
__int64 *HAL_avs_Init();
__int64 __fastcall handle_scmi_base_protocol_msg(__int64 a1);
__int64 __fastcall handle_scmi_clk_mgmt_protocol_msg(__int64 a1);
__int64 __fastcall cpucp_scmi_send(unsigned __int8 a1, unsigned __int8 a2, __int64 a3, unsigned int a4, _DWORD *a5, __int64 a6, unsigned int *a7);
unsigned __int64 __fastcall scmi_construct_msg_hdr(unsigned __int8 a1, char a2, unsigned __int8 a3, __int16 a4);
__int64 __fastcall write_output_payload_word_at_offset(__int64 result, int a2, int a3);
__int64 __fastcall write_output_payload_word(__int64 result, int a2);
__int64 __fastcall get_input_payload_char_at_offset(__int64 a1, int a2);
__int64 __fastcall get_input_payload_word_at_offset(__int64 a1, int a2);
__int64 __fastcall scmi_packet_init_payload(__int64 result);
__int64 __fastcall scmi_process_packet(__int64 a1, __int64 a2, __int64 a3);
__int64 __fastcall scmi_read_packet(__int64 a1, __int64 a2, __int64 a3);
__int64 __fastcall scmi_write_packet(__int64 a1);
unsigned __int64 __fastcall set_boot_remap(unsigned __int64 a1);
__int64 sec_core();
void *smmu_init();
__int64 __fastcall debugExecute_part_3(int a1, int a2, char a3, int a4, char *a5, unsigned int a6, __int64 *a7);
__int64 SpmiBus_Init();
__int64 SpmiBus_DeInit();
__int64 __fastcall SpmiBus_ReadLong(char a1, int a2, int a3, char *a4, unsigned int a5, __int64 *a6);
__int64 __fastcall SpmiBus_WriteLong(char a1, int a2, int a3, char *a4, unsigned int a5);
__int64 __fastcall SpmiOs_Init(_QWORD *a1);
__int64 __fastcall SpmiOs_Wait(_QWORD); // weak
_QWORD *__fastcall timer_qtimer_get_frames_list(_QWORD *result, _DWORD *a2);
__int64 timer_qtimer_security_config();
__int64 timer_qtimer_read_time_raw();
unsigned __int64 timer_qtimer_read_time_us();
void __fastcall timer_sec_wdog_start(int a1, int a2);
void timer_sec_wdog_stop();
__int64 timer_sec_wdog_pet();
__int64 __fastcall timer_sec_wdt_bark_handler(int a1, __int64 a2, __int64 a3);
void timer_sec_wdog_init();
__int64 Tlmm_PlatformInit();
__int64 __fastcall XpuEnableDomains(int **a1);
__int64 __fastcall XpuProgramMPUPartitionsPerm(_QWORD *a1, int a2);
__int64 __fastcall XpuProgramMPUPartitionsDynamicPerm(_QWORD *a1, int a2, int a3, int a4);
__int64 __fastcall XpuProgramMPUPartitions(_QWORD *a1, int a2);
__int64 __fastcall XpuSetRGOwnership(_QWORD *a1, int a2);
__int64 __fastcall ACQCGetxPUType(__int64 a1);
__int64 __fastcall XpuLockDownAssets(__int64 a1, unsigned __int8 a2);
__int64 __fastcall XpuMasterMPuInit(__int64 a1, unsigned int a2);
__int64 __fastcall XpuLockDownAssetDynamically(__int64 a1, unsigned __int8 a2, int a3, int a4, int a5, int a6);
__int64 __fastcall msm_xpu_print_log(int *a1);
